/**
 * Rvvup API
 * Rvvup Public API
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: info@rvvup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import http from 'http';
import { AccountStatement } from '../model/accountStatement';
import { AccountStatementCreateInput } from '../model/accountStatementCreateInput';
import { Checkout } from '../model/checkout';
import { Theme } from '../model/theme';
import { Authentication, Interceptor } from '../model/models';
import { HttpBearerAuth } from '../model/models';
export declare enum AccountStatementsApiApiKeys {
}
export declare class AccountStatementsApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        apiKey: HttpBearerAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: AccountStatementsApiApiKeys, value: string): void;
    set accessToken(accessToken: string | (() => string));
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Creates a new account statement
     * @summary Create a new account statement
     * @param merchantId Merchant ID
     * @param accountStatementCreateInput The account statement to create
     * @param idempotencyKey Idempotency Key
     */
    createAccountStatement(merchantId: string, accountStatementCreateInput: AccountStatementCreateInput, idempotencyKey?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: AccountStatement;
    }>;
    /**
     * Get an account statement by ID
     * @summary Get an account statement
     * @param merchantId Merchant ID
     * @param accountStatementId Account Statement ID
     */
    getAccountStatement(merchantId: string, accountStatementId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: AccountStatement;
    }>;
    /**
     * Get a checkout for an account statement by ID
     * @summary Get a checkout for an account statement
     * @param merchantId Merchant ID
     * @param accountStatementId Account Statement ID
     * @param checkoutId Checkout ID
     */
    getCheckoutForAccountStatement(merchantId: string, accountStatementId: string, checkoutId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Checkout;
    }>;
    /**
     * Gets the theme for an account statement. The theme is used to style the page.
     * @summary Get the theme for an account statement
     * @param merchantId Merchant ID
     * @param accountStatementId Account Statement ID
     */
    getThemeForAccountStatement(merchantId: string, accountStatementId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Theme;
    }>;
}
