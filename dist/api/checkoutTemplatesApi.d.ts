/**
 * Rvvup API
 * Rvvup Public API
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: info@rvvup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http from 'http';
import { CheckoutTemplate } from '../model/checkoutTemplate';
import { CheckoutTemplateCreateInput } from '../model/checkoutTemplateCreateInput';
import { CheckoutTemplatePage } from '../model/checkoutTemplatePage';
import { CheckoutTemplateUpdateInput } from '../model/checkoutTemplateUpdateInput';
import { Authentication, Interceptor } from '../model/models';
import { HttpBearerAuth } from '../model/models';
export declare enum CheckoutTemplatesApiApiKeys {
}
export declare class CheckoutTemplatesApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        apiKey: HttpBearerAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: CheckoutTemplatesApiApiKeys, value: string): void;
    set accessToken(accessToken: string | (() => string));
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Creates a new checkout template.
     * @summary Create new checkout template
     * @param merchantId merchant id
     * @param checkoutTemplateCreateInput The checkout template to create
     */
    createCheckoutTemplate(merchantId: string, checkoutTemplateCreateInput: CheckoutTemplateCreateInput, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CheckoutTemplate;
    }>;
    /**
     * Get a checkout template by id
     * @summary Get a checkout template
     * @param checkoutTemplateId checkout template id
     * @param merchantId merchant id
     */
    getCheckoutTemplate(checkoutTemplateId: string, merchantId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CheckoutTemplate;
    }>;
    /**
     * List checkout templates
     * @summary List checkout templates
     * @param merchantId merchant id
     * @param offset pagination offset
     * @param limit pagination limit
     */
    listCheckoutTemplates(merchantId: string, offset?: number, limit?: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CheckoutTemplatePage;
    }>;
    /**
     * Update a checkout template
     * @summary Update a checkout template
     * @param checkoutTemplateId checkout template id
     * @param merchantId merchant id
     * @param checkoutTemplateUpdateInput The checkout template to update
     */
    updateCheckoutTemplate(checkoutTemplateId: string, merchantId: string, checkoutTemplateUpdateInput: CheckoutTemplateUpdateInput, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CheckoutTemplate;
    }>;
}
